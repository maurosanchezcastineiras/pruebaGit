/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tienda_videojuegos;

import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Andrés Guillén
 */
public class VentanaMensajes extends javax.swing.JFrame {

    private static Thread messageThread;
    String url = "jdbc:mysql://localhost:3306/anmafe_games_bd";
    String usuario = "root";
    String clave = "";

    /**
     * Creates new form VentanaMensajes
     */
    public VentanaMensajes() {
        initComponents();
        PanelMensajes.setVisible(true);
        //crearPanelChats();
        //crearAlgo();
        //iniciarHiloMensajes();
        //comprobarMensajes();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelMensajes = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        textMensajeEnviar = new javax.swing.JTextArea();
        botonEnviar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textMensajeRecibido = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        textMensajeEnviar.setColumns(20);
        textMensajeEnviar.setRows(5);
        jScrollPane2.setViewportView(textMensajeEnviar);

        botonEnviar.setText("Enviar");
        botonEnviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEnviarActionPerformed(evt);
            }
        });

        textMensajeRecibido.setEditable(false);
        textMensajeRecibido.setColumns(20);
        textMensajeRecibido.setLineWrap(true);
        textMensajeRecibido.setRows(5);
        textMensajeRecibido.setText(mostrarMensaje()
        );
        jScrollPane1.setViewportView(textMensajeRecibido);

        javax.swing.GroupLayout PanelMensajesLayout = new javax.swing.GroupLayout(PanelMensajes);
        PanelMensajes.setLayout(PanelMensajesLayout);
        PanelMensajesLayout.setHorizontalGroup(
            PanelMensajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelMensajesLayout.createSequentialGroup()
                .addContainerGap(363, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(botonEnviar)
                .addGap(24, 24, 24))
            .addGroup(PanelMensajesLayout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PanelMensajesLayout.setVerticalGroup(
            PanelMensajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelMensajesLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addGroup(PanelMensajesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonEnviar))
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(PanelMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(PanelMensajes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonEnviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEnviarActionPerformed
        String mensaje = textMensajeEnviar.getText();

        // Consulta SQL para insertar datos
        String consulta = "INSERT INTO `incidentes`(`mensaje`, `empleado_id`, `referencia_id`) VALUES (?,?,?)";

        try (
                // Establecer conexión a la base de datos
                Connection conexion = DriverManager.getConnection(url, usuario, clave); // Crear una declaración preparada para evitar la inyección SQL y mejorar el rendimiento
                 PreparedStatement pstmt = conexion.prepareStatement(consulta)) {
            // Establecer los valores de los parámetros en la consulta preparada
            pstmt.setString(1, mensaje);
            pstmt.setInt(2, 3);
            pstmt.setInt(3, 1);

            // Ejecutar la consulta
            int filasInsertadas = pstmt.executeUpdate();

            if (filasInsertadas > 0) {
                JOptionPane.showMessageDialog(this, "El mensaje ha sido enviado");
            } else {
                JOptionPane.showMessageDialog(this, "No se pudo enviar el mensaje");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión: " + e.getMessage());
        }
    }//GEN-LAST:event_botonEnviarActionPerformed

    private void comprobarMensajes() {

        // Consulta SQL para insertar datos
        String consulta = "SELECT `id`, `mensaje`, `fecha`, `cliente_id`, `empleado_id`, `referencia_id`, `visto`, `solucionado` FROM `incidentes` WHERE 1";

        try (
                // Establecer conexión a la base de datos
                Connection conexion = DriverManager.getConnection(url, usuario, clave); PreparedStatement pstmt = conexion.prepareStatement(consulta)) {

            // Ejecutar la consulta
            ResultSet resultSet = pstmt.executeQuery();

            if (resultSet.next()) {
                System.out.println("Hay un resultado");
            } else {
                System.out.println("No hay un resultado");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión: " + e.getMessage());
        }
    }

    private String mostrarMensaje() {

        String consulta = "SELECT `mensaje`, `cliente_id`, `referencia_id`, `visto`, `solucionado` FROM `incidentes` WHERE 1";

        String mensaje = null;

        try (
                // Establecer conexión a la base de datos
                Connection conexion = DriverManager.getConnection(url, usuario, clave); PreparedStatement pstmt = conexion.prepareStatement(consulta)) {

            // Ejecutar la consulta
            ResultSet resultSet = pstmt.executeQuery();

            while (resultSet.next()) {
                mensaje = resultSet.getString("mensaje");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión: " + e.getMessage());
        }

        return mensaje;
    }

    public void crearPanelChats() {
        PanelChats = new JPanel();
        PanelChats.setBackground(Color.red);
        PanelChats.setBounds(0, 0, 500, 500);
        PanelChats.setLayout(null);
        add(PanelChats);
    }

    public void comprobarCrearChat() {

        // Consulta SQL para insertar datos
        String consulta = "SELECT DISTINCT cliente_id FROM incidentes WHERE visto = 0;";

        try (
                // Establecer conexión a la base de datos
                Connection conexion = DriverManager.getConnection(url, usuario, clave); PreparedStatement pstmt = conexion.prepareStatement(consulta)) {

            // Ejecutar la consulta
            ResultSet resultSet = pstmt.executeQuery();

            int x = 10;
            int y = 10;
            int ancho = 50;
            int alto = 50;

            int veces = 0;

            if (resultSet.next()) {
                veces++;
                System.out.println(resultSet.getString("cliente_id"));
            } else {
                System.out.println("No hay un resultado");
            }

            System.out.println("Se creará el chat " + veces + " veces");

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión: " + e.getMessage());
        }
    }

    public void crearAlgo() {
        int y = 0;
        for (int i = 0; i < 10; i++) {
            JPanel panel = new JPanel();
            panel.setBackground(Color.YELLOW);
            panel.setBounds(0, y, 50, 50);
            PanelChats.add(panel);

            y += 60; // Incrementa y en 60 unidades en cada iteración
        }
    }

    public void iniciarHiloMensajes() {
        messageThread = new Thread(() -> {
            while (!Thread.interrupted()) {
                try {
                    comprobarCrearChat();
                    //repaint();
                    Thread.sleep(5000); // Esperar 5 segundos antes de la próxima comprobación
                } catch (InterruptedException e) {
                    // Manejar la interrupción del hilo (por ejemplo, al cerrar la aplicación)
                    System.out.println("El hilo de verificación de mensajes fue interrumpido.");
                    return;
                }
            }
        });
        messageThread.setName("Comprobando mensajes nuevos");
        // Iniciar el hilo
        messageThread.start();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaMensajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaMensajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaMensajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaMensajes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaMensajes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelMensajes;
    private javax.swing.JButton botonEnviar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea textMensajeEnviar;
    private javax.swing.JTextArea textMensajeRecibido;
    // End of variables declaration//GEN-END:variables
    private javax.swing.JPanel PanelChats;
}
